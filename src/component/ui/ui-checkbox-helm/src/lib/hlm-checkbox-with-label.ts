/* Note for developers: This is a custom component fully generated by AI and needs human review.*/

import { Component, input, model, output } from '@angular/core';
import { HlmCheckbox } from './hlm-checkbox';
import { HlmLabel } from '../../../ui-label-helm/src';
import type { ClassValue } from 'clsx';

@Component({
	selector: 'hlm-checkbox-with-label',
	imports: [HlmCheckbox, HlmLabel],
	template: `
		<div class="flex items-start gap-sm">
			<hlm-checkbox 
				[id]="id()" 
				[checked]="checked()" 
				[disabled]="disabled()"
				[required]="required()"
				[class]="checkboxClass()"
				(changed)="onChanged($event)" />
			<div class="grid gap-xs">
				<label hlmLabel [for]="id()" [class]="labelClass()" [class.opacity-50]="disabled()">
					<ng-content />
				</label>
				@if (caption()) {
					<p class="caption-normal text-text-secondary" [class.opacity-50]="disabled()">{{ caption() }}</p>
				}
			</div>
		</div>
	`,
	standalone: true,
})
export class HlmCheckboxWithLabel {
	/** Unique identifier for the checkbox and label association */
	public readonly id = input.required<string>();
	
	/** The checked state of the checkbox */
	public readonly checked = model<boolean>(false);
	
	/** Whether the checkbox is disabled */
	public readonly disabled = input<boolean>(false);
	
	/** Whether the checkbox is required */
	public readonly required = input<boolean>(false);
	
	/** Optional caption text below the label */
	public readonly caption = input<string>('');
	
	/** Custom classes for the checkbox */
	public readonly checkboxClass = input<ClassValue>('');
	
	/** Custom classes for the label */
	public readonly labelClass = input<ClassValue>('');
	
	/** Event emitted when checkbox value changes */
	public readonly changed = output<boolean>();
	
	/** Event emitted when checkbox is touched */
	public readonly touched = output<void>();
	
	protected onChanged(value: boolean): void {
		this.checked.set(value);
		this.changed.emit(value);
		this.touched.emit();
	}
} 